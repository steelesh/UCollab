generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  refresh_token_expires_in Int?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id                 String         @id @default(cuid())
  username           String         @unique
  email              String         @unique
  createdDate        DateTime       @default(now())
  lastLogin          DateTime       @default(now())
  allowNotifications Boolean        @default(true)
  verifiedEmail      Boolean        @default(false)
  name               String?
  image              String?        @db.Text
  azureAdId          String?        @unique
  emailVerified      DateTime?
  accounts           Account[]
  comments           Comment[]
  notifications      Notification[]
  posts              Post[]
  profile            Profile?
  sessions           Session[]

  @@index([username, email])
  @@index([azureAdId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Profile {
  id               String   @id @default(cuid())
  userId           String   @unique
  createdDate      DateTime @default(now())
  lastModifiedDate DateTime @updatedAt
  skills           Json?
  interests        Json?
  gradYear         Int?
  bio              String?  @db.Text
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Post {
  id               String    @id @default(cuid())
  createdById      String
  createdDate      DateTime  @default(now())
  lastModifiedDate DateTime  @updatedAt
  title            String    @db.Text
  description      String    @db.Text
  postType         PostType
  technologies     Json?
  githubRepo       String?
  status           Status
  comments         Comment[]
  createdBy        User      @relation(fields: [createdById], references: [id], onDelete: Cascade)

  @@index([createdById])
  @@index([title(length: 191)])
}

model Comment {
  id               String   @id @default(cuid())
  postId           String
  createdById      String
  createdDate      DateTime @default(now())
  lastModifiedDate DateTime @updatedAt
  content          String   @db.Text
  createdBy        User     @relation(fields: [createdById], references: [id], onDelete: Cascade)
  post             Post     @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@index([postId])
  @@index([createdById])
}

model Notification {
  id                   String  @id @default(cuid())
  userId               String
  message              String  @db.Text
  disableNotifications Boolean @default(false)
  user                 User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

enum PostType {
  CONTRIBUTION
  FEEDBACK
  DISCUSSION
}

enum Status {
  OPEN
  CLOSED
}
