generator client {
  provider = "prisma-client-js"
}

datasource prisma {
  provider = "mysql"
  url      = env("MYSQL_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @prisma.Text
  access_token      String? @prisma.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @prisma.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model User {
  id                      String                   @id @default(cuid())
  username                String                   @unique
  email                   String                   @unique
  createdDate             DateTime                 @default(now())
  lastLogin               DateTime                 @default(now())
  fullName                String
  firstName               String
  lastName                String
  avatar                  String                   @prisma.Text
  avatarSource            AvatarSource             @default(DEFAULT)
  azureAdId               String                   @unique
  onboardingStep          OnboardingStep           @default(STEP_ONE)
  accounts                Account[]
  notifications           Notification[]           @relation("NotificationReceiver")
  notificationPreferences NotificationPreferences?
  triggeredNotifications  Notification[]           @relation("NotificationTrigger")
  sessions                Session[]
  comments                Comment[]
  posts                   Post[]
  postRatings             PostRating[]
  bio                     String?                  @prisma.Text
  technologies            Technology[]             @relation("UserTechnologies")
  gradYear                Int?
  githubProfile           String?
  mentorship              MentorshipStatus         @default(NONE)
  watchedPosts            PostWatcher[]
  Connection              Connection[]
  following               Connection[]             @relation("Following")
  followers               Connection[]             @relation("Followers")
}

model Post {
  id               String         @id @default(cuid())
  createdDate      DateTime       @default(now())
  lastModifiedDate DateTime       @updatedAt
  title            String         @prisma.Text
  description      String         @prisma.Text
  rating           Float          @default(0)
  allowRatings     Boolean        @default(false)
  allowComments    Boolean        @default(true)
  technologies     Technology[]   @relation("PostTechnologies")
  githubRepo       String?
  bannerImage      String?        @prisma.Text
  comments         Comment[]
  watchers         PostWatcher[]
  ratings          PostRating[]
  createdById      String
  createdBy        User           @relation(fields: [createdById], references: [id], onDelete: Cascade)
  notifications    Notification[] @relation("PostNotifications")
  postNeeds        PostNeed[]     @relation("PostNeeds")

  @@index([createdById])
  @@index([createdDate])
  @@index([rating])
  @@fulltext([title, description])
}

model PostRating {
  id          String   @id @default(cuid())
  postId      String
  userId      String
  rating      Int
  createdDate DateTime @default(now())
  post        Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([postId, userId])
  @@index([userId])
}

model PostWatcher {
  id          String   @id @default(cuid())
  postId      String
  userId      String
  createdDate DateTime @default(now())
  post        Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([postId, userId])
  @@index([userId])
}

model Technology {
  id          String   @id @default(cuid())
  name        String   @unique
  verified    Boolean  @default(false)
  createdDate DateTime @default(now())
  User        User[]   @relation("UserTechnologies")
  Post        Post[]   @relation("PostTechnologies")
}

model Comment {
  id               String         @id @default(cuid())
  postId           String
  createdById      String
  createdDate      DateTime       @default(now())
  lastModifiedDate DateTime       @updatedAt
  content          String         @prisma.Text
  createdBy        User           @relation(fields: [createdById], references: [id], onDelete: Cascade)
  post             Post           @relation(fields: [postId], references: [id], onDelete: Cascade)
  notifications    Notification[] @relation("CommentNotifications")
  parentId         String?
  parent           Comment?       @relation("Replies", fields: [parentId], references: [id])
  replies          Comment[]      @relation("Replies")

  @@index([postId])
  @@index([parentId])
  @@index([createdById])
}

model NotificationPreferences {
  id               String  @id @default(cuid())
  userId           String  @unique
  enabled          Boolean @default(true)
  allowComments    Boolean @default(true)
  allowMentions    Boolean @default(true)
  allowPostUpdates Boolean @default(true)
  allowSystem      Boolean @default(true)
  allowRatings     Boolean @default(true)
  user             User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Notification {
  id          String           @id @default(cuid())
  userId      String
  message     String           @prisma.Text
  createdDate DateTime         @default(now())
  isRead      Boolean          @default(false)
  type        NotificationType

  post      Post?    @relation("PostNotifications", fields: [postId], references: [id])
  postId    String?
  comment   Comment? @relation("CommentNotifications", fields: [commentId], references: [id])
  commentId String?

  triggeredBy   User?   @relation("NotificationTrigger", fields: [triggeredById], references: [id])
  triggeredById String?
  user          User    @relation("NotificationReceiver", fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([postId])
  @@index([commentId])
  @@index([triggeredById])
  @@index([isRead])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model PostNeed {
  id          String   @id @default(cuid())
  needType    NeedType
  createdDate DateTime @default(now())
  isPrimary   Boolean  @default(false)
  posts       Post[]   @relation("PostNeeds")

  @@index([needType])
}

model Connection {
  id          String   @id @default(cuid())
  followerId  String
  followingId String
  createdAt   DateTime @default(now())

  follower  User    @relation("Following", fields: [followerId], references: [id], onDelete: Cascade)
  following User    @relation("Followers", fields: [followingId], references: [id], onDelete: Cascade)
  User      User?   @relation(fields: [userId], references: [id])
  userId    String?

  @@unique([followerId, followingId])
}

enum AvatarSource {
  MICROSOFT
  UPLOAD
  DEFAULT
}

enum NeedType {
  FEEDBACK
  CONTRIBUTION
  DEVELOPER_AVAILABLE
  SEEKING_MENTOR
  MENTOR_AVAILABLE
  TEAM_FORMATION
}

enum NotificationType {
  COMMENT
  MENTION
  POST_UPDATE
  SYSTEM
  RATING
}

enum OnboardingStep {
  STEP_ONE
  STEP_TWO
  STEP_THREE
  STEP_FOUR
  COMPLETE
}

enum MentorshipStatus {
  MENTOR
  MENTEE
  NONE
}
