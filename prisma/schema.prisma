generator client {
  provider = "prisma-client-js"
}

datasource prisma {
  provider = "mysql"
  url      = env("MYSQL_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @prisma.Text
  access_token      String? @prisma.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @prisma.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model User {
  id                      String                   @id @default(cuid())
  username                String                   @unique
  email                   String                   @unique
  createdDate             DateTime                 @default(now())
  lastLogin               DateTime                 @default(now())
  fullName                String
  firstName               String
  lastName                String
  avatar                  String                   @prisma.Text
  avatarSource            AvatarSource             @default(DEFAULT)
  azureAdId               String                   @unique
  onboardingStep          OnboardingStep           @default(STEP_ONE)
  accounts                Account[]
  notifications           Notification[]           @relation("NotificationReceiver")
  notificationPreferences NotificationPreferences?
  triggeredNotifications  Notification[]           @relation("NotificationTrigger")
  sessions                Session[]
  comments                Comment[]
  projects                Project[]
  bio                     String?                  @prisma.Text
  role                    Role                     @default(USER)
  skills                  Skill[]
  gradYear                Int?
  githubProfile           String?
  mentorship              MentorshipStatus         @default(NONE)

  @@index([username])
  @@index([email])
  @@index([azureAdId])
}

model Project {
  id               String         @id @default(cuid())
  createdDate      DateTime       @default(now())
  lastModifiedDate DateTime       @updatedAt
  title            String         @prisma.Text
  description      String         @prisma.Text
  postType         PostType
  technologies     Technology[]
  githubRepo       String?
  comments         Comment[]
  createdById      String
  createdBy        User           @relation(fields: [createdById], references: [id], onDelete: Cascade)
  notifications    Notification[] @relation("ProjectNotifications")

  @@index([createdById])
  @@index([title(length: 191)])
}

model Skill {
  id          String   @id @default(cuid())
  name        String   @unique
  verified    Boolean  @default(false)
  createdDate DateTime @default(now())
  createdById String
  createdBy   User     @relation(fields: [createdById], references: [id], onDelete: Cascade)

  @@index([name])
}

model Technology {
  id          String   @id @default(cuid())
  name        String   @unique
  verified    Boolean  @default(false)
  createdDate DateTime @default(now())
  Project     Project? @relation(fields: [createdById], references: [id], onDelete: Cascade)
  createdById String?

  @@index([name])
}

model Comment {
  id               String         @id @default(cuid())
  projectId        String
  createdById      String
  createdDate      DateTime       @default(now())
  lastModifiedDate DateTime       @updatedAt
  content          String         @prisma.Text
  createdBy        User           @relation(fields: [createdById], references: [id], onDelete: Cascade)
  project          Project        @relation(fields: [projectId], references: [id], onDelete: Cascade)
  notifications    Notification[] @relation("CommentNotifications")

  @@index([projectId])
  @@index([createdById])
}

model NotificationPreferences {
  id                  String  @id @default(cuid())
  userId              String  @unique
  enabled             Boolean @default(true)
  allowComments       Boolean @default(true)
  allowMentions       Boolean @default(true)
  allowProjectUpdates Boolean @default(true)
  allowSystem         Boolean @default(true)
  user                User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Notification {
  id          String           @id @default(cuid())
  userId      String
  message     String           @prisma.Text
  createdDate DateTime         @default(now())
  isRead      Boolean          @default(false)
  type        NotificationType

  project   Project? @relation("ProjectNotifications", fields: [projectId], references: [id])
  projectId String?
  comment   Comment? @relation("CommentNotifications", fields: [commentId], references: [id])
  commentId String?

  triggeredBy   User?   @relation("NotificationTrigger", fields: [triggeredById], references: [id])
  triggeredById String?
  user          User    @relation("NotificationReceiver", fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([projectId])
  @@index([commentId])
  @@index([triggeredById])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

enum AvatarSource {
  MICROSOFT
  UPLOAD
  DEFAULT
}

enum PostType {
  CONTRIBUTION
  FEEDBACK
  DISCUSSION
}

enum NotificationType {
  COMMENT
  MENTION
  PROJECT_UPDATE
  SYSTEM
}

enum OnboardingStep {
  STEP_ONE
  STEP_TWO
  STEP_THREE
  STEP_FOUR
  COMPLETE
}

enum Role {
  ADMIN
  USER
}

enum MentorshipStatus {
  MENTOR
  MENTEE
  NONE
}
